#!/usr/bin/env ruby

require 'date'

ENV['TZ'] = 'UTC'

class Key
  def initialize(data)
    @data = data
  end

  def expired?
    !!@data.match(/\Apub:[er]/)
  end

  def fingerprint
    extract_attribute('fpr', -2)
  end

  def name
    extract_attribute('uid', 9)
  end

  private

  def extract_attribute(header, field)
    @data.each_line do |l|
      items = l.split(/:/)
      return items[field] if items.first == header
      nil
    end
  end

  def to_s
    "#{fingerprint}: #{name}"
  end
end

class ExpirationDate
  def initialize(amount=0, unit='day')
    ENV['TZ'] = 'UTC'
    future = Date.today
    method = %W[ next #{unit} ].join('_').to_s
    if future.respond_to?(method)
      amount.times do
        future = future.send(method)
      end
    else
      puts "Do not understand #{unit}. Exiting."
      exit 1
    end
    @expiration = future.strftime('%Y%m%dT%H%M%S')
  end

  def to_s
    @expiration
  end
end

def halp(error=1)
  stream = STDERR
  if error == 0
    stream = STDOUT
  end
  stream.write <<~HALP
  halp!1!!
  HALP
  exit error
end

def parse_arg(*args)
  amount = 0
  unit = 'day'
  ARGV.each do |arg|
    if %w[ -h --help -help help ].include?(arg)
      halp 0
    elsif arg =~ /\A[0-9]+\z/
      amount = arg.to_i
    elsif %w[ day month year ].include?(arg)
      unit = arg
    else
      puts "Do not understand arg #{arg}"
      halp 2
    end
  end
  return amount, unit
end

if __FILE__ == $0
  amount, unit = parse_arg

  command = %W[
    apt-key adv
    --list-public-keys 
    --with-fingerprint
    --with-colons 
  ]

  e = ExpirationDate.new(amount, unit)
  command << '--faked-system-time' << e
  keyset = `#{command.join(' ')}`
  error = nil
  error_count = 0

  keyset.split(/\n(?=pub:)/).each do |r|
    next unless r.start_with?('pub:')
    key = Key.new(r)
    if key.expired?
      STDERR.write "Expired! #{key}\n"
      error_count += 1
      error = 1
    end
  end
  if error
    STDERR.write "There were #{error_count} expirations with #{amount} #{unit}\n"
    exit error
  end
end
