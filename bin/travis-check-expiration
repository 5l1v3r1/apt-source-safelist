#!/usr/bin/env ruby

require 'date'

ENV['TZ'] = 'UTC'

class Key
  def initialize(data)
    @data = data
  end

  def expired?
    !!@data.match(/\Apub:[er]/)
  end

  def fingerprint
    extract_attribute('fpr', -2)
  end

  def name
    extract_attribute('uid', 9)
  end

  private

  def extract_attribute(header, field)
    @data.each_line do |l|
      items = l.split(/:/)
      return items[field] if items.first == header
      nil
    end
  end

  def to_s
    "#{fingerprint}: #{name}"
  end
end

class ExpirationChecker
  attr_reader :amount, :unit

  def initialize(amount=0, unit='day')
    @amount = amount
    @unit = unit
    @expired_keys = []
  end

  def expiration
    date = Date.today
    method = "next_#{unit}".to_s
    if date.respond_to?(method)
      amount.times do
        date = date.send(method)
      end
    else
      warn "Do not understand #{unit}. Exiting."
      return 1
    end
    date.strftime('%Y%m%dT%H%M%S')
  end

  def command
    %W[
      apt-key adv
      --list-public-keys
      --with-fingerprint
      --with-colons
      --faked-system-time
      #{expiration}
    ].join(' ')
  end

  def run_command
    @command_output ||= `#{command}`
  end

  def verify
    error_count = 0

    run_command.split(/\n(?=pub:)/).each do |r|
      next unless r.start_with?('pub:')
      key = Key.new(r)
      if key.expired?
        add_expired_key(key)
        error_count += 1
      end
    end
    error_count
  end

  def add_expired_key(key)
    @expired_keys << key
  end

  def report
    @expired_keys
  end
end

def halp(error=0)
  help = <<~HALP
  #{File.basename($PROGRAM_NAME)} [-h] [amount] [day|month|year]
  Parses apt-key output with a fake time (defaulting to today), and
  reports which keys have expired at the specified time.
  HALP
  say = :puts
  if error != 0
    say = :warn
  end
  say help
  exit error
end

def parse_arg
  amount = 0
  unit = 'day'
  ARGV.each do |arg|
    if %w[ -h --help -help help ].include?(arg)
      halp
    elsif arg =~ /\A[0-9]+\z/
      amount = arg.to_i
    elsif %w[ day month year ].include?(arg)
      unit = arg
    else
      warn "Do not understand argument #{arg}"
      halp 2
    end
  end
  return amount, unit
end

def warn(str)
  STDERR.puts str
end

def say(str)
  STDOUT.puts str
end

def main
  ENV['TZ'] = 'UTC'
  amount, unit = parse_arg

  expiration = ExpirationChecker.new(amount, unit)
  error_count = expiration.verify
  if error_count != 0
    warn "There will be #{error_count} expirations in #{amount} #{unit}."
    puts expiration.report
  end
  error_count > 0 ? 1 : 0
end

if __FILE__ == $PROGRAM_NAME
  exit main
end
