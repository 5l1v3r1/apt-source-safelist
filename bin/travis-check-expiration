#!/usr/bin/env ruby

require 'date'

ENV['TZ'] = 'UTC'

class Key
  def initialize(data)
    @data = data
  end

  def expired?
    !!@data.match(/\Apub:[er]/)
  end

  def fingerprint
    extract_attribute('fpr', -2)
  end

  def name
    extract_attribute('uid', 9)
  end

  private

  def extract_attribute(header, field)
    @data.each_line do |l|
      items = l.split(/:/)
      return items[field] if items.first == header
      nil
    end
  end

  def to_s
    # XXX is this necessary?
    "#{fingerprint}: #{name}"
  end
end

class ExpirationChecker
  attr_reader :amount, :unit

  def initialize(amount=0, unit='day')
    @amount = amount
    @unit = unit
  end

  def expiration
    date = Date.today
    method = "next_#{unit}".to_s
    if date.respond_to?(method)
      amount.times do
        date = date.send(method)
      end
    else
      warn "Do not understand #{unit}. Exiting."
      return 1
    end
    date.strftime('%Y%m%dT%H%M%S')
  end

  def command
    %W[
      apt-key adv
      --list-public-keys
      --with-fingerprint
      --with-colons
      --faked-system-time
      #{expiration}
    ].join(' ')
  end

  def command_output
    @command_output ||= `#{command}`
  end

  def parse_output
    error_count = 0

    command_output.split(/\n(?=pub:)/).each do |r|
      next unless r.start_with?('pub:')
      key = Key.new(r)
      if key.expired?
        warn "Expired! #{key}"
        error_count += 1
      end
    end
    error_count
  end
end

def halp(error=1)
  stream = STDERR
  if error == 0
    stream = STDOUT
  end
  stream.puts <<~HALP
  halp!1!!
  HALP
  exit error
end

def parse_arg(*args)
  amount = 0
  unit = 'day'
  ARGV.each do |arg|
    if %w[ -h --help -help help ].include?(arg)
      halp 0
    elsif arg =~ /\A[0-9]+\z/
      amount = arg.to_i
    elsif %w[ day month year ].include?(arg)
      unit = arg
    else
      warn "Do not understand argument #{arg}"
      halp
    end
  end
  return amount, unit
end

def warn(str)
  STDERR.puts str
end

def main
  ENV['TZ'] = 'UTC'
  amount, unit = parse_arg

  expiration = ExpirationChecker.new(amount, unit)
  error_count = expiration.parse_output
  if error_count != 0
    warn "There were #{error_count} expirations with #{amount} #{unit}"
  end
  error_count > 0 ? 1 : 0
end

if __FILE__ == $0
  exit main
end
